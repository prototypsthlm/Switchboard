/**
    Connector for TMDB.

    API used: TMDb.com (not to be confused with IMDB)
    Retrieves data about movies, actors and more.

    Information about image URLs and their sizes is not retrieved in every response. Instead you have to generate the full URL.
    Information of what the URL should be and the sizes available can be retrieved using the following URL:
    [GET] http://api.themoviedb.org/3/configuration

    The information generated by this URL is stored below and needs to be manually updated from time to time
    
    @module Connectors
    @resources: http://help.themoviedb.org/kb/api/about-3
**/

var util = require('util');
var BaseConnector = require('./base_connector.js');
var ConnectorResponse = require('./connector_response.js');
var querystring = require('querystring');
var keys = require('./keys');


var ImageType = {};

// Configuration retrieved using: http://api.themoviedb.org/3/configuration
// Needs to be updated from time to time.
// Latest update: 2012-10-28
var config = {
  "images": {
      "backdrop_sizes": ["w300", "w780", "w1280", "original"],
      "base_url": "http://cf2.imgobject.com/t/p/",
      "poster_sizes": ["w92", "w154", "w185", "w342", "w500", "original"],
      "profile_sizes": ["w45", "w185", "h632", "original"]
  }
};


var include_adult = { paramName: "include_adult", paramValues: ["true","false"] };
var apiActions = {
    //GET http://api.themoviedb.org/3/search/movie
    "movieSearch" : { action: ['movie','search'], in_param_names: ['query'], output_nodes: ['results.id', 'results.original_title'], optionals: ['year','language',include_adult,'page'] },
   
    //GET http://api.themoviedb.org/3/movie/11
    "movieLookup" : { action: ['movie','lookup'], in_param_names: ['id'], output_nodes: ['id', 'imdb_id', 'belongs_to_collection.id', 'belongs_to_collection.name', 'genres.id', 
        'genres.name','production_companies.id','production_companies.name','production_countries.iso_3166_1','production_countries.name', 'tagline'], optionals: ['language'] }, //note that things in array...works still?
   
    //http://api.themoviedb.org/3/movie/11/casts
    "movieCast" : { action: ['movie','casts'], in_param_names: ['id'], output_nodes: ['cast.id', 'cast.name','cast.character'], optionals: ['language'] },
    
    "movieAltTitles" : { action: ['movie','alternative_titles'], in_param_names: ['id'], output_nodes: ['id', 'titles.iso_3166_1','titles.title'], optionals: ['country'] },
    "movieImages" : { action: ['movie','images'], in_param_names: ['id'], output_nodes: [], optionals: ['language'] },
    "movieKeywords" : { action: ['movie','keywords'], in_param_names: ['id'], output_nodes: ['id','keywords.id','keywords.name'], optionals: ['language'] },
    "movieReleases" : { action: ['movie','releases'], in_param_names: ['id'], output_nodes: ['countries.release_date'], optionals: [] },
    "movieTrailers" : { action: ['movie','trailers'], in_param_names: ['id'], output_nodes: [], optionals: ['language'] },
    "movieTranslations" : { action: ['movie','translations'], in_param_names: ['id'], output_nodes: [], optionals: ['language'] },
    "similarMovies" : { action: ['movie','similar_movies'], in_param_names: ['id'], output_nodes: ['results.id', 'results.title', 'results.original_title'], optionals: ['page','language'] },
    
    "genreMovies" : { action: ['genre','movies'], in_param_names: ['id'], output_nodes: ['results.id', 'results.title', 'results.original_title'], optionals: ['page','language'] },
    
    "personSearch" : { action: ['person','search'], in_param_names: ['query'], output_nodes: ['results.id', 'results.name'], optionals: [include_adult,'page'] },
    "personLookup" : { action: ['person','lookup'], in_param_names: ['id'], output_nodes: ['id', 'name', 'birthday', 'place_of_birth'], optionals: ['language'] },
    "personCredits" : { action: ['person','credits'], in_param_names: ['id'], output_nodes: ['cast.character', 'cast.id', 'cast.original_title'], optionals: ['language'] },
    "personImages" : { action: ['person','images'], in_param_names: ['id'], output_nodes: [], optionals: ['language'] },
    
    "companyLookup" : { action: ['company','lookup'], in_param_names: ['id'], output_nodes: ['id', 'name'], optionals: [] },
    "companySearch" : { action: ['company','search'], in_param_names: ['query'], output_nodes: ['results.id', 'results.name'], optionals: ['page'] },
    "companyMovies" : { action: ['company','movies'], in_param_names: ['id'], output_nodes: ['id','results.id', 'results.title','results.original_title'], optionals: ['page', 'language'] },
    
    "collectionInfo" : { action: ['collection','info'], in_param_names: ['id'], output_nodes: ['id', 'name', 'parts.id','parts.title'], optionals: ['language'] },
    "collectionImages" : { action: ['collection','images'], in_param_names: ['id'], output_nodes: [], optionals: ['language'] }
    
};



function TMDB(param) {
    this.name = "TMDB";
	this.host = param.host;
	this.responseObject = [];
	this.apiKey = keys[this.name]['key'];
	this.apiActions = apiActions;
	this.docs = "http://help.themoviedb.org/kb/api/about-3";
}

/**
    @param {String} keyInResult the key used in the result from the API. It is used to parse what type of image we should generate a URL for
    @param {String} fileName The filename of the image as defined in the result from the API
*/
function generateImageUrls(keyInResult, fileName) {
    // http://cf2.imgobject.com/t/p/w500/mOTtuakUTb1qY6jG6lzMfjdhLwc.jpg
    var images = [];
    var typeOfImage = keyInResult.slice(0, keyInResult.search("_"));
    var sizes = config.images[typeOfImage + "_sizes"];
    for(var i in sizes) {
        images.push(config.images.base_url + sizes[i] + fileName);
    }
    return images;    
}

/**
    Adds full URL to images found in the API response. Since there are several dimensions for every image the filepath is replaced with an array with multiple image URLs. Each with a different size

    @param {Object} response The result object returned by the API
**/
function addImageUrlsToResponse(result) {
    if(typeof result == "object") {
        for(var i in result) {
            var responsePart = result[i];
            if(typeof responsePart == "object") {
                addImageUrlsToResponse(responsePart);
            }
            else if(typeof responsePart == "string") {
                if(responsePart.slice(responsePart.length-3) == "jpg") {
                    result[i] = generateImageUrls(i, result[i]);                    
                }
            }
            
        }
    }
}



util.inherits(TMDB, BaseConnector);

/**
    Modifies the result, adding image urls instead of only paths to the clean result

    @param {Object} resultObj Result object as defined by the BaseConnector. Includes, among other things, the result returned by the API
    @return {ConnectorResponse}
**/
TMDB.prototype.connectorResult = function(resultObj) {
    addImageUrlsToResponse(resultObj.result);    
    return new ConnectorResponse(resultObj, resultObj.result);    
}

TMDB.prototype.getActionUrl = function(query, apiConfig){
    var apiAction = apiActions[apiConfig.action];    
    var domain = apiAction.action[0]; //t ex "artist"
    var action = apiAction.action[1];
    var actionPath;
    var parameterObject = {};
    parameterObject['api_key'] = this.apiKey;
    
    for(var param in apiConfig.optionals){
        parameterObject[apiConfig.optionals[param].paramName] = apiConfig.optionals[param].paramValue; 
    }
    if(action == "search"){
        parameterObject[apiConfig.in_param_name] = query
        actionPath = action + "/" + domain + "?" + querystring.stringify(parameterObject)
    }
    else if(action == 'lookup') {
        actionPath = domain + "/" + query + "?" + querystring.stringify(parameterObject)
    }
    else {
        actionPath = domain + "/" + query + "/" + action + "?" + querystring.stringify(parameterObject)
    }
    return this.host + actionPath
}

var tmdb = new TMDB({
	host: "http://api.themoviedb.org/3/"
});
module.exports = tmdb;