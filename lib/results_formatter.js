/**
* The ResultFormatter takes the response gathered by all connectors 
* and merges them to one formatted result.
*
* @class ResultFormatter
* @constructor
* @param {Array} result Array holding the result gathered from all connectors
*/
var $ = require('jquery');
var jpath = require("node-jpath");
var logger = require('./sb_tracer.js')();
var SwitchboardHelper = require('./switchboard_helper.js');

/**
* The constructor. The result given to the constructor is always cloned
* to ensure that the raw result isn't altered in any way
*
* @method
* @param {Array} result Array holding the result gathered from all connectors. Example: [{api: "Name of Connector A", calls: []}, {api: "Name of Connector B", calls: []}]
* @param {Object} config Object holding configuration used when merging the result
*/

function ResultFormatter(result, config) {    
    
    // raw contains the result retrieved by all connectors
    // raw cannot be accessed directly to ensure that the result is always cloned
    // Otherwise we would end up affecting the raw result while building the clean result
    
    var raw = typeof result != "object" ? [] : $.extend(true, [], result); // MAKE sure result is an array
    
    // When connector results is retrieved they are stored in this object
    // If same connector results is retrieved multiple times it is retrieved from this object
    // instead of the raw object. The reason for this is that raw should never be affected
    // by changes, but when results is merged result should be altered
    var connectorResults = {};

    // Pointer to this object, used within "private" functions
    var self = this;

    // Holds configurations used when merging the result
    var config = {     
        mergeMethod: 'extract'
    };

    // If configuration is passed as an argument it is added to the local config object
    if(typeof config == "object") {
        this.config = $.extend(true, this.config, config);
    }

    /**
        Remove results in an object given an array holding parts of an path (i.e. keys in an object)

        @method removeUnusedResult
        @public        
        @param {Object} connectorResult Object containing result that should be removed
        @param {String} pathToArray Path to an array in the connectoResult object where data should be removed
        @param {int} indexToRemvoe The index that should be removed
    */
    var removeUnusedResult = function(connectorResult, pathToArray, indexToRemove) {
        // Locate which path in the in source that points to an array
        // When found we want to remove that data using the indexToRemove argument

        if(pathToArray) {
            // Remove the part that is an array
            var insourceArray = pathToArray.split('.');
            var keyHoldingArray = insourceArray.pop();
            var path = insourceArray.join('.');

            if(insourceArray.length) {
                var resultHoldingArray = jpath.filter(connectorResult, path);
                if(resultHoldingArray instanceof Array) {
                    for(var i in resultHoldingArray) {
                        resultHoldingArray[i][keyHoldingArray].splice(indexToRemove,1); // remove one at indexToRemove
                    }
                } else {
                    resultHoldingArray[keyHoldingArray].splice(indexToRemove,1);
                }
            }
            else {
                connectorResult[keyHoldingArray].splice(indexToRemove,1);
            }
        } else if(connectorResult instanceof Array){
            connectorResult.splice(indexToRemove,1);
        }
    }

    /**
        Returns a cloned version of the raw result.

        @method raw
        @public        
        @return {Array} Cloned version of the raw result
    */
    this.raw = function() {
        return $.extend(true, [], raw);
    };

    /**
        Returns a configuration value for a given configuration if found        

        @method config
        @public
        @param {String} key String Name of the configuration
        @return {String} The value of a specified configuration or undefined if not found
    */
    this.config = function(key) {
        return key in config ? config[key] : undefined;
    };

    /**
        Sets config file which is used by the ResultFormatter when mergin the result,
        e.g. merge method

        @method setConfig
        @public
        @param {String} key String Name of the configuration
        @param {String} value Value of the configuration
    */
    this.setConfig = function(key, value) {
        config[key] = value;
    };

    /**
        Sets the raw value that is used when all results is merged.
        Always cloned to make sure that it can't be changed after it is set

        @method setRaw
        @public
        @param {Array} rawResult The result generated by all connectors involved in a routine        
    */    
    this.setRaw = function(rawResult) {
        raw = $.extend(true, [], rawResult);
    };

    /**
        Helper function to retrieve all results generated by a connector given the connector index.

        @method findConnectorResults
        @protected
        @param {int} connectorIndex The order index of the connector that should be retrieved. connectorIndex = 0 is the first connector used to retrieve the data        
        @param {Array} Returns all results generated by a connector
    */
    var findConnectorResults = function(connectorIndex) {        
        if(!raw[connectorIndex]) {            
            return null;
        }

        // Since raw is always cloned we store the connector results in an array
        // so that the result can be modified but keeps the raw result intact
        if(!(connectorIndex in connectorResults)) {
            connectorResults[connectorIndex] = self.raw()[connectorIndex];
        }
        // Holds all calls and their results for a given connector
        return connectorResults[connectorIndex];
    };

    /**
        Helper function to retrieve a ConnectorReponse

        @method findConnectorResponse
        @protected
        @param {int} connectorIndex The order index of the connector that should be retrieved. connectorIndex = 0 is the first connector used to retrieve the data
        @param {int} index Used to retrieve a connector response matching this index
        @param {ConnectorResponse} Returns a ConnectorResponse object
    */
    var findConnectorResponse = function(connectorIndex, index) {               
       var connectorResults = findConnectorResults(connectorIndex);

        for(var i in connectorResults.calls) {
            var connectorResponse = connectorResults.calls[i];

            if(connectorResponse.meta.index == index) {
                return connectorResponse;
            }                        
        }

        return null;
    };


    /**
        Used to sort an array with ConnectorResponse object by call index and then index

        @method sortByIndexAndCallIndex
        @protected
        @param {Object} a ConnectorResponse object to be compared with b
        @param {Object} b ConnectorResponse object to be compared with a
    */
    var sortByIndexAndCallIndex = function(a, b) {
        if(a.meta.callIndex < b.meta.callIndex) return -1;
        if(a.meta.callIndex > b.meta.callIndex) return 1;
        if(a.meta.index < b.meta.index) return -1;
        if(a.meta.index > b.meta.index) return 1;
        return 0;
    };

    /**
        Helper function to retrieve the index of the first array found in the given path

        @method indexOfFirstArrayInPath
        @protected
        @param {String} valueSourcePath String containing a dot notated path used to traverse an object. Every dot indicates a new level in the object.        
        @return {int} The index of the first array found in the given path. If no array is found, undefined is returned
    */
    var indexOfFirstArrayInPath = function(valueSourcePath) {
        var parts = valueSourcePath.split('.');        
        for(var i in parts) {
            var part = parts[i]; 
            if(!isNaN(part)) {
                return part;
            }
        }
        return undefined;
    };

    /**
        Helper function to create a path used when adding data to a connector result

        @method createAddPath
        @protected
        @param {String} valueSourcePath String containing a dot notated path used to traverse an object. Every dot indicates a new level in the object.
        @param {String} key A text that is be added to the last part of the path
        @return {String} A path to be used when adding result from one connector to another
    */
    var createAddPath = function(valueSourcePath, key) {
        // Look for the first array in the path used to retrieve current query
        var pathParts = valueSourcePath.split('.');
        
        while(pathParts.length) {
            var part = pathParts.pop();
            if(isNaN(part)) {
                break;
            }
        }

        if(key) {
            pathParts.push(key);    
        }
        
        return pathParts.join('.');
    };

    /**
        Merges all results from a given connector with all other connector result.
        Depending on merge method unused results may be removed.

        @method mergeConnectorResults
        @protected
        @param {int} connectorIndex The index of the connector the merge should use        
        @return {Array} A merged result from a number of connectors
    */
    this.mergeConnectorResults = function(connectorIndex) {
        var connectorResults = findConnectorResults(connectorIndex);
        
        // Holds the final merged result
        // Only the last connector returns a mergedResult, i.e. the connector
        // with index == 0 since there is no other connector to merge the result with
        var mergedResult = [];        
        
        // Sort all calls by call index and index
        connectorResults.calls.sort(sortByIndexAndCallIndex);

        var highestArrayIndex = 0;
        // Holds the result to be added to the source connector, i.e. the connector
        // this connector retrieved the query data from        
        var resultToAdd = {};

        // Number of calls this connector made. For every call there is a ConnectoResponse
        var nrOfCalls = connectorResults.calls.length;

        // Holds indices that has been added to the source connector
        var arrayIndices = {};

        for(var i = 0; i < nrOfCalls; i++) {
            var connectorResponse = connectorResults.calls[i];
            
            if(connectorIndex == 0) {
                mergedResult.push(connectorResponse.result);
                continue;
            }

            // If true this is the last call (and result) made by this connector
            var lastCall = i == nrOfCalls-1;

            var meta = connectorResponse.meta;
            var callIndex = meta.callIndex;   

            // Full path to the query data used by this connector
            // E.g. events.event.0.artists.artist.2
            // Numbers is indices in an array
            var valueSourcePath = meta.valueSourcePath != "" ? meta.valueSourcePath : "";
            
            // Index of the first array in the value source path
            var arrayIndex = indexOfFirstArrayInPath(valueSourcePath);
            
            // ConnectorResponse from the connector the current connector used as source 
            // to collect query data
            var sourceResponse = findConnectorResponse(connectorIndex-1, callIndex);            
            
            // If the query data is retrieved from an array or not
            var pathParts = valueSourcePath.split('.');
            var isArraySource = !isNaN(pathParts[pathParts.length-1]);

            // Path leading to the first array in the path       
            var pathToArray = SwitchboardHelper.findFirstArrayFromPath(valueSourcePath);

            // If query data is retrieved from an array we add the result differently
            if(isArraySource) {
                resultToAdd[meta.query] = connectorResponse.result;
                arrayIndices[arrayIndex] = arrayIndex;
            } else {                
                resultToAdd = connectorResponse.result;
                arrayIndices[arrayIndex] = arrayIndex;
            }
            
            // If there are no more data in this connector we update the soure connector
            // If next result in this connector has data from another array we also add data
            if(resultToAdd != {}) {
                var nextArrayIndex = lastCall ? null : connectorResults.calls[i+1].meta.arrayIndex;            
                if(lastCall || nextArrayIndex != arrayIndex) {
                    var addPath = createAddPath(valueSourcePath, meta.apiConfig.action);                                
                    SwitchboardHelper.setObjectData(sourceResponse.result, addPath.split('.'), resultToAdd);
                    resultToAdd = {};
                }
            }
            
            if(this.config("mergeMethod") != "extract") {
                continue;
            }

            // Remove results from the previous connector that wasn't used by this connector
            // Do that if this is the last call or if next call has another call index 
            // since we have to remove results for every call index
            var nextCallIndex = lastCall ? null : connectorResults.calls[i+1].meta.callIndex;
            if(lastCall || nextCallIndex != callIndex) {
                var arrayResult = jpath.filter(sourceResponse.result, pathToArray);
                // Remove results that current connector never used
                for(var indexToRemove = arrayResult.length; indexToRemove > -1; indexToRemove--) {
                    if(indexToRemove.toString() in arrayIndices) continue;                    
                    removeUnusedResult(sourceResponse.result, pathToArray, indexToRemove, false);  
                }
                arrayIndices = {};
            }
        }

        // Continue merge if there are a connector preceding the current connector
        // otherwise return the merged result
        return connectorIndex > 0 ? this.mergeConnectorResults(connectorIndex-1) : mergedResult;
    }

}

/**
    Merges the result using the merge method found in config

    @method mergeResult
    @public    
    @return {Array} A merged result from all connectors
*/
ResultFormatter.prototype.mergeResult = function(){
    return this.mergeConnectorResults(this.raw().length-1);    
};

/**
    Merges the result using the "inject" merge method. 
    The "inject" method does not remove any result

    @method injectMerge
    @public    
    @return {Array} A merged result from all connectors. No result removed
*/
ResultFormatter.prototype.injectMerge = function(){
    this.setConfig("mergeMethod", "inject");
    logger.debug("Using injectMerge");
    return this.mergeResult();
};

/**
    Merges the result using the "extract" merge method. 
    The "extract" method removes results that wasn't used by another connector

    @method extractMerge
    @public    
    @return {Array} A merged result from all connectors. Unused result is removed
*/
ResultFormatter.prototype.extractMerge = function(){
    this.setConfig("mergeMethod", "extract");
    logger.debug("Using extractMerge");
    return this.mergeResult();
};

module.exports = ResultFormatter;