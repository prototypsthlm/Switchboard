/**
A SwitchboardJob takes a machine routine, builds an async waterfall executable and runs it. Each step performs
GET-requests via Connectors retrieving results and passes them on to the next step and the next Connector for
extraction of further query data and further API-calls/GET-requests.

@module Switchboard

**/

var $ = require('jquery');
var async = require("async");
var jpath = require("node-jpath");
var logger = require('./sb_tracer.js')();
var SwitchboardHelper = require('./switchboard_helper.js');

/**
Instance of a SwitchboardJob.

@class SwitchboardJob 
@constructor
@param {Object} userRoutine Object specifying API-methods and API-execution order
@param {Object} machineRoutine Object specifying API-methods and API-execution order
@param {Array} entryQueries Object specifying API-methods and API-execution order
@param {Integer} jobId Object specifying API-methods and API-execution order

*/

/**
The user routine (for reference)
@property userRoutine
@type {Object}
*/
/**
The machine routine to be made into a waterfall routine
@property machineRoutine
@type {Object}
*/
/**
A jobs progression (retrieved API-results) is appended here.
@property jobResult
@type {Array}
*/
/**
Array of queries to initiate the job.
@property entryQueries
@type {Array}
*/
/**
The job ID
@property id
@type {Integer}
*/


function SwitchboardJob(userRoutine, machineRoutine, entryQueries, jobId) {
    
    var machineRoutine = machineRoutine;
    var userRoutine = userRoutine;

    var entryQueries = entryQueries instanceof Array ? entryQueries : [entryQueries];
    var jobResult = [];
    var id = jobId >= 0 ? jobId : Math.floor((Math.random()*10000000)+1);


    function queryData(queries, callIndex, info) {
        logger.debug("Queries",  JSON.stringify(queries, null, 4));
        queries = queries instanceof Array ? queries : [queries];
        return {
            queries: queries,
            callIndex: callIndex,
            info: info
        }
    }
    
    /**
    From a value source and a result all possible paths is generatet.
    The path shows the hierarchy in an object with dot notation with added indices.

    E.g. inSource = "events.event.artists.artist"
    might result in a path looking like "events.event.2.artists.artist.0".
    Where 2 indicates index 2 of the event array, and 0 the first index in the artist array.

    @method getValueSourcePaths
    @protected
    @param {Object} result The result object generated by a ConnectorResponse.
    @param {String} valueSource String showing the path to the query that should be used by another connector.
    @return {Array} Returns an array with all possible paths given the valueSource and the result
    
    */
    function getValueSourcePaths(result, valueSource) {
        var paths = [];    
        var arrayPath = SwitchboardHelper.findFirstArrayFromValueSource(result, valueSource);    
        if(arrayPath) {
            var arrayResult = jpath.filter(result, arrayPath);
            var newValueSource = valueSource.substring(arrayPath.length+1); 
            for(var i in arrayResult) {
                var path = arrayPath + '.' + i;
                var tmpPaths = getValueSourcePaths(arrayResult[i], newValueSource);
                if(tmpPaths.length) {
                    for(var j in tmpPaths) {                    
                        paths.push(path + "." + tmpPaths[j]);    
                    }         
                }
                else {                
                    if(newValueSource) {
                        path += "." + newValueSource;
                    }               
                    paths.push(path);
                }
            }
        }

        return paths;
    }

    /**
    Extracts query data from a previous Connectors ConnectorResponse via jpath.

    @method extractQueries
    @protected
    @param {Object} machineRoutineObject A routine step configuration.
    @param {Object} connectorResponse Object containting previous Connectors results.
    @return {Array} Returns an array of query data to be executed by a Connector
    
    */
    function extractQueries(machineRoutineObject, connectorResponse) {        
        
        var callSessions = [];
        var valueSource = machineRoutineObject.apiConfig.in_source

        if ("entry query" == valueSource) { // data point is the entry query            
            callSessions.push(queryData(entryQueries, null, [{valueSourcePath: ""}]));
        }
        else if(connectorResponse != null) { // extract data points from previous result            
            $.each(connectorResponse, function(i) {                
                var queries = [];
                var info = [];                
                var valueSourcePaths = getValueSourcePaths(connectorResponse[i].result, valueSource);                
                var queryCount = 0;

                // Iterate over all value source paths and retrieve the data they point to
                // If data is found it is put in an array and should be used as query data by a connector
                // Information about the full value source path is also saved
                // Make sure that no more than the limit is added
                for(var j in valueSourcePaths) {
                    var path = valueSourcePaths[j];                    
                    var query = SwitchboardHelper.getObjectData(connectorResponse[i].result, path.split('.'));
                    if(query != undefined) {
                        queryCount++;
                        queries.push(query);
                        info.push({valueSourcePath: path});
                        if(queryCount == machineRoutineObject.options.limit) {
                            break;
                        }
                    }
                }

                var callIndex = connectorResponse[i].meta.index;                
                callSessions.push(queryData(queries, callIndex, info));
            });
        }

        return callSessions;

    };

    /**
    Builds an array of functions, with calls to different APIs, to be inputted into run and executed
    by async.waterfall

    @method buildWaterfallRoutine
    @protected
    @param {Object} machineRoutine Routine with references to Connector instances
    @return {Array} Returns an array of functions to be run by async.waterfall
    
    */
    
    function buildWaterfallRoutine(machineRoutine){
        
        var waterFallRoutine = [];
        
        $.each(machineRoutine, function(i,a){ // for each API-step in the machineRoutine...
            var r;
            var received = null;
            
            if (i < 1) { // needed to comply with async syntax
                r = function(callback) {
                    try {           
                        var connector = machineRoutine[i].connector;
                        var queryData = extractQueries(machineRoutine[i], received); // acquire queries from earlier API calls or from the entry query
                    
                        //console.log(_.uniq(queryData[0].queries));
                    
                        connector.execute(queryData, machineRoutine[i].apiConfig, function(results) {                        
                            jobResult.push({api: connector.name, calls: results}); // an API-call block is completed, append results to global routine result array                 
                            callback(null, results); // send results onward to the next function in the waterfall
                        });
                    }
                    catch(e) {
                        callback(e,null);
                    }
                };
            }
            else { // needed to comply with async syntax
                r = function(received, callback) {
                    try {
                        var connector = machineRoutine[i].connector;
                        var queryData = extractQueries(machineRoutine[i], received);

                        //console.log(_.uniq(queryData[0].queries)); //this breaks merge?
                                                        
                        connector.execute(queryData, machineRoutine[i].apiConfig, function(results) {
                            jobResult.push({api: connector.name, calls: results});
                            callback(null, results); // send results onward to the next function in the waterfall
                        });
                    }
                    catch(e) {
                        callback(e,null);
                    }
                
                };
            }
            
            waterFallRoutine.push(r);
            
        });

        return waterFallRoutine;
    }
    
    /**
    Executes the job routine via async waterfall.

    @method run
    @param {Function} callback Callback to be executed upon completion
    
    */
    
    this.run = function(callback){
        jobResult = [];
        var routine = buildWaterfallRoutine(machineRoutine)
        async.waterfall(routine, function(err, result) {
            callback(err, jobResult);         
        });
    };

    /**
    Returns the job ID
    
    @method id
    
    */

    this.id = function() {
        return id;
    }

    /**
    Returns the jobs entry queries
    
    @method entryQueries
    
    */

    this.entryQueries = function() {
        logger.trace(entryQueries);
        return entryQueries;
    };
    
    /**
    Returns the jobs user routine
    
    @method userRoutine
    
    */
    
    this.userRoutine = function() {
        return userRoutine;
    }
}

module.exports = SwitchboardJob;